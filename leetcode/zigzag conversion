impl Solution {
    pub fn convert(s: String, num_rows: i32) -> String {
        // Если количество строк равно 1 или оно больше либо равно длине строки, 
        // то зигзагообразное преобразование не требуется. Возвращаем исходную строку.
        if num_rows == 1 || num_rows >= s.len() as i32 {
            return s;
        }

        // Вычисляем длину одного цикла зигзагообразного движения.
                let cycle_len = 2 * num_rows - 2;

        let mut result = String::new();

        // Проходим по каждой строке (ряду) зигзага.
        for r in 0..num_rows {
            let mut i: usize = r as usize;

            // Пока индекс меньше длины строки, добавляем символы в результат.
            while i < s.len() {
                // Добавляем символ из строки по индексу i.
                result.push(s.as_bytes()[i] as char);

                // Если это не первая и не последняя строка, нужно учесть символы на диагоналях.
                if r != 0 && r != num_rows - 1 {
                    // Вычисляем индекс диагонального символа.
                    let diagonal_index: usize = i + cycle_len as usize - 2 * r as usize;

                    // Если диагональный символ находится в пределах строки, добавляем его.
                    if diagonal_index < s.len() {
                        result.push(s.as_bytes()[diagonal_index] as char);
                    }
                }

                // Переходим к следующему символу, который находится через один полный цикл.
                i += cycle_len as usize;
            }
        }

        // Возвращаем получившуюся строку.
        result
    }
}
